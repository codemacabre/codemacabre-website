---
---
<span class="theme">
  <input class="sr-only" id="theme-toggle" type="checkbox" checked="">
  <label id="theme-toggle-label" for="theme-toggle">
    <span>
      Toggle theme
    </span>
    <span class="icon"></span>
  </label>
</span>

<style>
  html {
    & .theme {
      display: inline-block;
      position: relative;
      
      & label {
        align-items: center;
        cursor: pointer;
        display: inline-flex;
        gap: 0.5rem;
        margin: 0;
        overflow: hidden;
        padding: 0 0.4rem 0 0;
      }

      & #theme-toggle:checked ~ label > .icon {
        background: var(--dark);
        border-radius: 6px;
        height: 12px;
        position: relative;
        width: 12px;

        &::after {
          background: var(--dark);
          border-radius: 6px;
          bottom: 3px;
          content: '';
          height: 12px;
          left: 20px;
          position: absolute;
          width: 12px;
        }
      }
      
      & #theme-toggle:not(:checked) ~ label > .icon {
        background: var(--haze);
        border-radius: 6px;
        height: 12px;
        position: relative;
        width: 12px;

        &::after {
          background: var(--dark);
          border-radius: 6px;
          bottom: 3px;
          content: '';
          height: 12px;
          left: 4px;
          position: absolute;
          width: 12px;
        }
      }


      & #theme-toggle ~ label,
      & label {
        border-bottom: 1px dashed var(--dark);
        color: var(--dark);
        padding: 0.2rem 0.4rem 0.2rem 0.4rem;
      }

      & #theme-toggle:active ~ label,
      & #theme-toggle:focus ~ label,
      & #theme-toggle:hover ~ label {
        background-color: var(--dark);
        border-bottom: 1px dashed transparent;
        color: var(--haze);
        transition: 200ms;

        & .icon {
          background-color: var(--haze);
          transition: 200ms;

          &::after {
            transition: 200ms;
          }
        }
      }
    }
    
    &.dark {
      & .theme {
        & #theme-toggle ~ label,
        & label {
          border-bottom: 1px dashed var(--haze);
          color: var(--haze);
        }
        
        & #theme-toggle:active ~ label,
        & #theme-toggle:focus ~ label,
        & #theme-toggle:hover ~ label {
          background-color: var(--murk);
          border-bottom: 1px dashed transparent;
          color: var(--haze);
          transition: 200ms;
          
          & .icon {
            background-color: var(--haze);
            transition: 200ms;
            
            &::after {
              background-color: var(--murk);
              transition: 200ms;
            }
          }
        }
      }
    }
  }
</style>

<script is:inline>
  const themeInput = document.querySelector('#theme-toggle');
  const toggleableElements = document.querySelectorAll('.toggleable-theme');

  const theme = (() => {
    if (typeof sessionStorage !== 'undefined' && sessionStorage.getItem('theme')) {
      return sessionStorage.getItem('theme') ?? 'light';
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
      return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
    toggleableElements.forEach((element) => element.classList.remove('dark'));
    themeInput.checked = true;
  } else {
    document.documentElement.classList.add('dark');
    toggleableElements.forEach((element) => element.classList.add('dark'));
    themeInput.checked = false;
  }
  
  window.sessionStorage.setItem('theme', theme);
  
  const toggleTheme = () => {
    document.documentElement.classList.toggle('dark');
    toggleableElements.forEach((element) => element.classList.toggle('dark'));
    
    const isDark = document.documentElement.classList.contains('dark');
    sessionStorage.setItem('theme', isDark ? 'dark' : 'light');
  }

  themeInput?.addEventListener('change', toggleTheme);

  themeInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      toggleTheme()
    }
  });
</script>
