---
import Footer from '~/components/Footer.astro';
import Header from '~/components/Header.astro';
import '~/styles/global.css';
import '~/styles/prism.css';

const { pageTitle } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="The notes and projects of Myles Lewando, data visualisation developer and designer.">
    <meta name="author" content="Myles Lewando">
    <meta name="color-scheme" content="light dark">
    <meta name="theme-color" content="#111111">
  
    <link rel="canonical" href={Astro.url}>

    <link rel="icon" type="image/svg+xml" href="/images/favicon-light.svg" media="(prefers-color-scheme:no-preference)">
    <link rel="icon" type="image/svg+xml" href="/images/favicon-dark.svg"  media="(prefers-color-scheme:dark)">
    <link rel="icon" type="image/svg+xml" href="/images/favicon-light.svg" media="(prefers-color-scheme:light)">

    <slot name="head">
      <meta property="og:title" content={pageTitle ? pageTitle : 'Code Macabre'} />
      <meta property="og:description" content="The notes and projects of Myles Lewando, data visualisation developer and designer." />
      <meta property="og:url" content={Astro.url} />
      <meta property="og:type" content="website" />
      <meta property="og:image" content="https://codemacabre.com/images/logo.png" />

      <meta name="twitter:title" content={pageTitle ? `${pageTitle} / Code Macabre` : 'Code Macabre'} />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:image" content="https://codemacabre.com/images/logo.png" />
    </slot>

    <title>{pageTitle ? `${pageTitle} / Code Macabre` : 'Code Macabre'}</title>
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>

<script>
  const copyButtonLabel = 'Copy';
  const codeBlocks = Array.from(document.querySelectorAll('pre'));

  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div');
    wrapper.className = 'code-wrapper';

    const copyButton = document.createElement('button');
    copyButton.className = 'code-copy';
    copyButton.innerHTML = `<span>${copyButtonLabel}</span>`;

    codeBlock.appendChild(copyButton);

    codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  const copyCode = async (block, button) => {
    const code = block.querySelector('code');
    const text = code.innerText;

    try {
      await navigator.clipboard.writeText(text);
    } catch (err) {
      console.error(err);
      selectText(code);
      document.execCommand('copy');
      window.getSelection()?.removeAllRanges();
    }

    button.innerText = 'Copied';

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 1000);
  };

  const selectText = (element) => {
    const range = document.createRange();
    range.selectNodeContents(element);
    const selection = window.getSelection();
    selection?.removeAllRanges();
    selection?.addRange(range);
  };
</script>
